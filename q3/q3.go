//O cozinheiro Remy preparou uma refei√ß√£o para si mesmo e, enquanto almo√ßava, decidiu assistir a um v√≠deo no RataTube. No
//entanto, ele tem um tempo limitado de ùë° segundos para o almo√ßo. Ele pediu a sua ajuda para escolher o v√≠deo ideal.
//
//O RataTube possui um feed de ùëõ v√≠deos, cada um representado por uma estrutura de v√≠deo contendo informa√ß√µes sobre sua
//dura√ß√£o em segundos e o n√≠vel de entretenimento. O feed √© inicialmente aberto no primeiro v√≠deo, e Remy pode pular para
//o pr√≥ximo v√≠deo em 1 segundo (caso exista). Ele pode pular v√≠deos quantas vezes desejar, inclusive n√£o pular nenhum.
//
//Sua tarefa √© auxiliar Remy a escolher um v√≠deo que ele possa abrir e assistir dentro do tempo dispon√≠vel, ùë° segundos. Se
//houver v√°rios v√≠deos que se encaixam nessa condi√ß√£o, ele deseja escolher o v√≠deo com o maior n√≠vel de entretenimento.
//Retorne qualquer v√≠deo apropriado ou exiba um erro caso n√£o haja um v√≠deo adequado dentro do tempo dispon√≠vel.

package main

import (
	"errors"
	"fmt"
)

type Video struct {
	Nome          string
	Duration      int
	Entertainment int
}

func EscolherVideo(time int, videos []Video) (Video, error) {
	var (
		maxEntertainmentVideo Video
	)
	for i := range videos {
		video := videos[i]
		if video.Duration <= time && video.Entertainment > maxEntertainmentVideo.Entertainment {
			maxEntertainmentVideo = video
		}
		time--
	}
	if maxEntertainmentVideo.Entertainment == 0 {
		return Video{}, errors.New("nenhum video encontrado")
	}
	return maxEntertainmentVideo, nil
}

func main() {
	var t int
	fmt.Println("Quanto tempo voc√™ possui de almo√ßo(em segundos) ? ")
	fmt.Scanln(&t)

	videos := []Video{
		{"V√≠deo 1", 120, 5},
		{"V√≠deo 2", 90, 4},
		{"V√≠deo 3", 180, 7},
		{"V√≠deo 4", 60, 3},
	}

	videoEscolhido, err := EscolherVideo(t, videos)

	if err != nil {
		fmt.Println("Erro:", err)
	} else {
		fmt.Printf("V√≠deo escolhido: %s\n", videoEscolhido.Nome)
	}
}
